; -- Nigel Code Layout - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Coding Space: 0x0100 - 0x08FF 
Total Command Count: 0x0800  (2048)

// -- Paging -- //
(ignoring idea of all code starting at 0x0100)
Each page is 0x100 (256) bytes long
0x000N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x001N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x002N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x003N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x004N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x005N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x006N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x007N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x008N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x009N - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x00AN - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x00BN - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x00CN - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x00DN - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x00EN - 0 1 2 3 4 5 6 7 8 9 A B C D E F
0x00FN - 0 1 2 3 4 5 6 7 8 9 A B C D E F

Used page bytes:
0x0000 |Page Number		nn
0x0001 |			nn
0x0002 |			nn
0x0003 |			nn
0x0004 Start of RAM space


; -- Command Code Layout -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	// ----- Interrupt List ----- //		25
	// - system commands -				7
	// - Chip Pin Control -				3
	// - bitwise operations -			6
	// - move number -				2
	// - And/Or commands -				12
	// - number control	-			n
	// - math operations -				26
	// - if statements - if with else -		2
	// - while loop -				2
	// - for loops -				4
	// - sub functions -				c

total: 89 + n + c

; -- Number Types  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

	-- Number Types and Structure --

	01 - Regular
	02 - Floating Point
	03 - Fractional
	04 - Power
	05 - Root

	|Type|IDNumber|Length|Values..


// -- Regular Numbers  -- //
	N (in 2's compliment)

8-Bit
N(8)
16-bit	
N(16)
32-bit
N(32)
64-bit
N(64)

// -- Floating Point Numbers -- //
	(accoring to the internet and college)
		S N*10^M - Sign Mantissa*10^Exponent
8-Bit
Sign(1)|Exponent(3)|Mantissa(4)
16-bit
Sign(1)|Exponent(5)|Mantissa(10)
32-bit
Sign(1)|Exponent(8)|Mantissa(23)
64-bit
Sign(1)|Exponent(11)|Mantissa(52)

	(Brandon's world)
		N*10^M - Mantissa*10^Exponent
N is in 2's Compliment
8-Bit
Exponent(4)|Mantissa(4)
16-bit
Exponent(6)|Mantissa(10)
32-bit
Exponent(8)|Mantissa(24)
64-bit
Exponent(10)|Mantissa(54)

// -- Fractional Numbers  -- //
	N/M

8-Bit
N(4)|M(4)
16-bit
N(8)|M(8)
32-bit
N(16)|M(16)	
64-bit
N(32)|M(32)

N is in 2's Compliment

// -- Power Numbers  -- //
	N^M

8-Bit
N(4)|M(4)
16-bit
N(8)|M(8)
32-bit
N(16)|M(16)
64-bit
N(32)|M(32)	

N is in 2's Compliment

// -- Root Numbers  -- //
	N^(1/M)

8-Bit
N(4)|M(4)
16-bit
N(8)|M(8)
32-bit
N(16)|M(16)
64-bit
N(32)|M(32)	

N is in 2's Compliment

; -- About the Wait command -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
Assuming chip vibrates at 16MHz

Start up time:			2.69 Microseconds (2.69x10^-6) (0.00000269 seconds)
a Discover loop takes:	1.37 Microseconds (1.37x10^-6) (0.00000137 seconds)

a wait loop (counting in milliseconds) 
1 = desired				1.00425 = reality
2 = desired				2.00457 = reality
3 = desired				3.00488 = reality
4 = desired				4.00519 = reality

always (desired time + 0.00425 milliseconds)
gains 3.1 milliseconds every 10 seconds

; -- Square  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

By adding a sequence of odd numbers, the square of any number can be found.
As in, to square "3" one can add together the first 3 numbers of this odd sequence
	1 + 3 + 5 = 9

; -- Square Root - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

By subtracting a sequence of odd numbers, the square root of any number can be found (with remainder)

Example 1: Simple Number
	SquareRoot: 9
	1. 9 - 1 = 8
	2. 8 - 3 = 5
	3. 5 - 5 = 0 Zero detected
	Three steps used; answer is 3

Example 2: Difficult Number
	SquareRoot: 10
	1. 10 - 1 = 9
	2. 9  - 3 = 6
	3. 6  - 5 = 1
	4. 1  - 7 = -6 Detected Negitive Number
	Four-1 steps used; answer 3 with remainder 1

	SquareRoot: 2
	1. 2 - 1 = 1
	2. 1 - 3 = -2  Detected Negitive Number
	Two-1 steps used; answer 1 with remainder 1

; -- Factorial  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
(postponed)

Multiplies a number by a sequence of each whole number below it
Eg. 5factorial = 5 * 4 * 3 * 2 * 1 = 120

Postponing Reason:
	Command considered too difficult to produce, and too useless to matter
	Complexity of calculation mixed with (as yet) undeveloped number types












